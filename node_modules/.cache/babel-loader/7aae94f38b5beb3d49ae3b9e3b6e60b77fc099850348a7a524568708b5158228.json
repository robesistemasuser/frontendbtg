{"ast":null,"code":"import axios from 'axios';\n\n// URL base de la API desde variables de entorno\nconst BASE_URL = process.env.REACT_APP_API_URL;\n\n/**\r\n * Suscribirse a un fondo.\r\n * @param subscriptionData - Datos de la suscripción.\r\n * @returns Un objeto con el mensaje de éxito o error.\r\n */\nexport const subscribeToFund = async subscriptionData => {\n  try {\n    const response = await axios.post(`${BASE_URL}/userFunds`, subscriptionData);\n    return {\n      message: response.data.message || 'Subscription successful!'\n    };\n  } catch (error) {\n    var _error$response, _error$response$data;\n    throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Error al suscribirse al fondo.');\n  }\n};\n\n/**\r\n * Cancelar la suscripción a un fondo.\r\n * @param fundId - ID del fondo cuya suscripción se desea cancelar.\r\n * @returns Un objeto con el mensaje de éxito o error.\r\n */\nexport const cancelFundSubscription = async (fundId, userId) => {\n  try {\n    const response = await axios.delete(`${BASE_URL}/userfunds/${userId}/${fundId}`);\n    return {\n      message: response.data.message || 'Subscription cancelled successfully!'\n    };\n  } catch (error) {\n    var _error$response2, _error$response2$data;\n    throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Error al cancelar la suscripción al fondo.');\n  }\n};\n\n/**\r\n * Obtener el historial de transacciones.\r\n * @param documento - ID del usuario a consultar transacciones.\r\n * @returns Un array de objetos que representan el historial de transacciones.\r\n */\nexport const getTransactionHistory = async documento => {\n  try {\n    const response = await axios.get(`${BASE_URL}/transactions/document/${documento}`);\n\n    // Mapeamos la respuesta para estructurar los datos en un formato más amigable\n    return response.data.map(transaction => {\n      var _transaction$transact, _transaction$document, _transaction$fundName, _transaction$fundId, _transaction$amount, _transaction$transact2;\n      return {\n        type: ((_transaction$transact = transaction.transactionType) === null || _transaction$transact === void 0 ? void 0 : _transaction$transact.S) || 'N/A',\n        // Tipo de transacción (subscribe, etc.)\n        details: `Documento: ${((_transaction$document = transaction.documento) === null || _transaction$document === void 0 ? void 0 : _transaction$document.S) || 'N/A'}, Fondo: ${((_transaction$fundName = transaction.fundName) === null || _transaction$fundName === void 0 ? void 0 : _transaction$fundName.S) || 'N/A'}, FundId: ${((_transaction$fundId = transaction.fundId) === null || _transaction$fundId === void 0 ? void 0 : _transaction$fundId.S) || 'N/A'}, Monto: ${((_transaction$amount = transaction.amount) === null || _transaction$amount === void 0 ? void 0 : _transaction$amount.N) || '0'}`,\n        date: new Date(((_transaction$transact2 = transaction.transactionDate) === null || _transaction$transact2 === void 0 ? void 0 : _transaction$transact2.S) || '').toLocaleString() // Formatear la fecha\n      };\n    });\n  } catch (error) {\n    var _error$response3, _error$response3$data;\n    throw new Error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Error al obtener el historial de transacciones.');\n  }\n};\n\n/**\r\n * Obtener los fondos dinscritos del usuario.\r\n * @param documento - ID del usuario a consultar fondos inscritos del usuario.\r\n * @returns Un array de objetos que representan los fondos inscritos del usuario.\r\n */\nexport const getUserByDocument = async documento => {\n  try {\n    const response = await axios.get(`${BASE_URL}/users/documento/${documento}`);\n    return response.data;\n  } catch (error) {\n    var _error$response4, _error$response4$data;\n    throw new Error(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Error al obtener los fondos inscritos.');\n  }\n};\n\n/**\r\n * Enviar una notificación.\r\n * @param message - Mensaje de notificación a enviar.\r\n * @returns Un objeto con el mensaje de éxito o error.\r\n */\nexport const sendNotification = async (message, notifyBy) => {\n  try {\n    const response = await axios.post(`${BASE_URL}/notifications`, {\n      message,\n      notifyBy\n    });\n    return {\n      message: response.data.message || 'Notification sent successfully!'\n    };\n  } catch (error) {\n    var _error$response5, _error$response5$data;\n    throw new Error(((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || 'Error al enviar la notificación.');\n  }\n};\n\n/**\r\n * Obtener la lista de fondos disponibles.\r\n * @returns Un array de objetos que representan los fondos disponibles.\r\n */\nexport const fetchFunds = async () => {\n  try {\n    const response = await axios.get(`${BASE_URL}/funds`);\n    return response.data; // Asegúrate de que la estructura de la respuesta es [{ id: string, name: string }, ...]\n  } catch (error) {\n    var _error$response6, _error$response6$data;\n    throw new Error(((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.message) || 'Error al obtener la lista de fondos.');\n  }\n};\n\n/**\r\n * Obtener la lista de fondos disponibles.\r\n * @returns Un array de objetos que representan los fondos disponibles.\r\n */\nexport const getFundsById = async fundId => {\n  try {\n    const response = await axios.get(`${BASE_URL}/funds/${fundId}`);\n    return {\n      id: response.data.id.S,\n      name: response.data.name.S,\n      details: `Name: ${response.data.name.S}`\n    };\n  } catch (error) {\n    var _error$response7, _error$response7$data;\n    throw new Error(((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : (_error$response7$data = _error$response7.data) === null || _error$response7$data === void 0 ? void 0 : _error$response7$data.message) || 'Error al obtener el fondos.');\n  }\n};\n\n/**\r\n * Obtener la lista de fondos disponibles.\r\n * @returns Un array de objetos que representan los fondos disponibles.\r\n */\nexport const getUserFunds = async userId => {\n  try {\n    const response = await axios.get(`${BASE_URL}/userfunds/${userId}`);\n    return response.data.map(fund => ({\n      details: `Documento: ${fund.document.S}, Fondo: ${fund.fundId.S}, Nombre: ${fund.fundName.S}`\n    }));\n  } catch (error) {\n    var _error$response8, _error$response8$data;\n    throw new Error(((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : (_error$response8$data = _error$response8.data) === null || _error$response8$data === void 0 ? void 0 : _error$response8$data.message) || 'Error al obtener la lista de fondos.');\n  }\n};\n\n/**\r\n * Buscar un usuario por documento.\r\n * @param document - Documento del usuario a buscar.\r\n * @returns Un objeto con la información del usuario.\r\n */\nexport const fetchUserByDocument = async () => {\n  try {\n    const response = await axios.get(`${BASE_URL}/users`);\n    return response.data; // Asegúrate de que la respuesta tiene un campo 'id'\n  } catch (error) {\n    var _error$response9, _error$response9$data;\n    throw new Error(((_error$response9 = error.response) === null || _error$response9 === void 0 ? void 0 : (_error$response9$data = _error$response9.data) === null || _error$response9$data === void 0 ? void 0 : _error$response9$data.message) || 'Error al buscar el usuario.');\n  }\n};\n\n/**\r\n * Registrar historico de la transaction de un fondo.\r\n * @param transactionData - Datos de la transaction.\r\n * @returns Un objeto con el mensaje de éxito o error.\r\n */\nexport const registrarTransactionHistory = async transactionData => {\n  try {\n    const response = await axios.post(`${BASE_URL}/transactions`, transactionData);\n    return {\n      message: response.data.message || 'Subscription successful!'\n    };\n  } catch (error) {\n    var _error$response10, _error$response10$dat;\n    throw new Error(((_error$response10 = error.response) === null || _error$response10 === void 0 ? void 0 : (_error$response10$dat = _error$response10.data) === null || _error$response10$dat === void 0 ? void 0 : _error$response10$dat.message) || 'Error al suscribirse al fondo.');\n  }\n};","map":{"version":3,"names":["axios","BASE_URL","process","env","REACT_APP_API_URL","subscribeToFund","subscriptionData","response","post","message","data","error","_error$response","_error$response$data","Error","cancelFundSubscription","fundId","userId","delete","_error$response2","_error$response2$data","getTransactionHistory","documento","get","map","transaction","_transaction$transact","_transaction$document","_transaction$fundName","_transaction$fundId","_transaction$amount","_transaction$transact2","type","transactionType","S","details","fundName","amount","N","date","Date","transactionDate","toLocaleString","_error$response3","_error$response3$data","getUserByDocument","_error$response4","_error$response4$data","sendNotification","notifyBy","_error$response5","_error$response5$data","fetchFunds","_error$response6","_error$response6$data","getFundsById","id","name","_error$response7","_error$response7$data","getUserFunds","fund","document","_error$response8","_error$response8$data","fetchUserByDocument","_error$response9","_error$response9$data","registrarTransactionHistory","transactionData","_error$response10","_error$response10$dat"],"sources":["F:/Proyectos/frontendbtg/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\n// URL base de la API desde variables de entorno\r\nconst BASE_URL = process.env.REACT_APP_API_URL; \r\n\r\n/**\r\n * Suscribirse a un fondo.\r\n * @param subscriptionData - Datos de la suscripción.\r\n * @returns Un objeto con el mensaje de éxito o error.\r\n */\r\nexport const subscribeToFund = async (subscriptionData: {\r\n    userId: string;\r\n    fundId: string;\r\n    fundName: string;\r\n    document: string;\r\n    transactionType: string;\r\n    amount: number;\r\n    active: boolean;\r\n}): Promise<{ message: string }> => {\r\n    try { \r\n        const response = await axios.post(`${BASE_URL}/userFunds`, subscriptionData);\r\n        \r\n        return { message: response.data.message || 'Subscription successful!' };\r\n    } catch (error: any) { \r\n        throw new Error(error.response?.data?.message || 'Error al suscribirse al fondo.');\r\n    } \r\n};\r\n\r\n/**\r\n * Cancelar la suscripción a un fondo.\r\n * @param fundId - ID del fondo cuya suscripción se desea cancelar.\r\n * @returns Un objeto con el mensaje de éxito o error.\r\n */\r\nexport const cancelFundSubscription = async (fundId: string, userId: string): Promise<{ message: string }> => {\r\n    try {\r\n        const response = await axios.delete(`${BASE_URL}/userfunds/${userId}/${fundId}`);\r\n        return { message: response.data.message || 'Subscription cancelled successfully!' };\r\n    } catch (error: any) {\r\n        throw new Error(error.response?.data?.message || 'Error al cancelar la suscripción al fondo.');\r\n    }\r\n};  \r\n\r\n/**\r\n * Obtener el historial de transacciones.\r\n * @param documento - ID del usuario a consultar transacciones.\r\n * @returns Un array de objetos que representan el historial de transacciones.\r\n */\r\nexport const getTransactionHistory = async (documento: string): Promise<{\r\n    type: string;\r\n    details: string;\r\n    date: string;\r\n  }[]> => {\r\n    try {\r\n      const response = await axios.get(`${BASE_URL}/transactions/document/${documento}`);\r\n      \r\n      // Mapeamos la respuesta para estructurar los datos en un formato más amigable\r\n      return response.data.map((transaction: any) => ({\r\n        type: transaction.transactionType?.S || 'N/A', // Tipo de transacción (subscribe, etc.)\r\n        details: `Documento: ${transaction.documento?.S || 'N/A'}, Fondo: ${transaction.fundName?.S || 'N/A'}, FundId: ${transaction.fundId?.S || 'N/A'}, Monto: ${transaction.amount?.N || '0'}`,\r\n        date: new Date(transaction.transactionDate?.S || '').toLocaleString(), // Formatear la fecha\r\n      }));\r\n    } catch (error: any) {\r\n      throw new Error(error.response?.data?.message || 'Error al obtener el historial de transacciones.');\r\n    }\r\n  };\r\n\r\n/**\r\n * Obtener los fondos dinscritos del usuario.\r\n * @param documento - ID del usuario a consultar fondos inscritos del usuario.\r\n * @returns Un array de objetos que representan los fondos inscritos del usuario.\r\n */\r\nexport const getUserByDocument = async (documento: string): Promise<{\r\n    id: any;\r\n    documento: any; \r\n  }> => {\r\n      try { \r\n          const response = await axios.get(`${BASE_URL}/users/documento/${documento}`) \r\n        \r\n          return response.data \r\n      } catch (error: any) {\r\n          throw new Error(error.response?.data?.message || 'Error al obtener los fondos inscritos.');\r\n      }\r\n  };\r\n\r\n/**\r\n * Enviar una notificación.\r\n * @param message - Mensaje de notificación a enviar.\r\n * @returns Un objeto con el mensaje de éxito o error.\r\n */\r\nexport const sendNotification = async (message: string, notifyBy: string): Promise<{ message: string }> => {\r\n    try {\r\n        const response = await axios.post(`${BASE_URL}/notifications`, { message, notifyBy });\r\n        return { message: response.data.message || 'Notification sent successfully!' };\r\n    } catch (error: any) {\r\n        throw new Error(error.response?.data?.message || 'Error al enviar la notificación.');\r\n    }\r\n};\r\n\r\n/**\r\n * Obtener la lista de fondos disponibles.\r\n * @returns Un array de objetos que representan los fondos disponibles.\r\n */\r\nexport const fetchFunds = async (): Promise<{ id: string; name: string }[]> => {\r\n    try {\r\n        const response = await axios.get(`${BASE_URL}/funds`);\r\n        return response.data; // Asegúrate de que la estructura de la respuesta es [{ id: string, name: string }, ...]\r\n    } catch (error: any) {\r\n        throw new Error(error.response?.data?.message || 'Error al obtener la lista de fondos.');\r\n    }\r\n};\r\n\r\n/**\r\n * Obtener la lista de fondos disponibles.\r\n * @returns Un array de objetos que representan los fondos disponibles.\r\n */\r\nexport const getFundsById = async (fundId: string): Promise<{ id: string; name: string,  details: string; }> => {\r\n    try { \r\n        const response = await axios.get(`${BASE_URL}/funds/${fundId}`);\r\n        \r\n        return {\r\n            id: response.data.id.S,\r\n            name: response.data.name.S,\r\n            details: `Name: ${response.data.name.S}`,  \r\n        };\r\n        \r\n    } catch (error: any) {\r\n        throw new Error(error.response?.data?.message || 'Error al obtener el fondos.');\r\n    }\r\n};\r\n\r\n\r\n/**\r\n * Obtener la lista de fondos disponibles.\r\n * @returns Un array de objetos que representan los fondos disponibles.\r\n */\r\nexport const getUserFunds = async (userId: string): Promise<{ funId: string; document: string, fundName: string,  details: string; }[]> => {\r\n    try { \r\n        const response = await axios.get(`${BASE_URL}/userfunds/${userId}`);\r\n        return response.data.map((fund: any) => ({\r\n            \r\n            details: `Documento: ${fund.document.S}, Fondo: ${fund.fundId.S}, Nombre: ${fund.fundName.S}`\r\n           \r\n            \r\n        }));\r\n    } catch (error: any) {\r\n        throw new Error(error.response?.data?.message || 'Error al obtener la lista de fondos.');\r\n    }\r\n};\r\n\r\n/**\r\n * Buscar un usuario por documento.\r\n * @param document - Documento del usuario a buscar.\r\n * @returns Un objeto con la información del usuario.\r\n */\r\nexport const fetchUserByDocument = async (): Promise<{id: string; name: string; documento: string }[]> => {\r\n    try {  \r\n        const response = await axios.get(`${BASE_URL}/users`);\r\n        return response.data; // Asegúrate de que la respuesta tiene un campo 'id'\r\n    } catch (error: any) {\r\n        throw new Error(error.response?.data?.message || 'Error al buscar el usuario.');\r\n    }\r\n};\r\n\r\n/**\r\n * Registrar historico de la transaction de un fondo.\r\n * @param transactionData - Datos de la transaction.\r\n * @returns Un objeto con el mensaje de éxito o error.\r\n */\r\nexport const registrarTransactionHistory = async (transactionData: {\r\n    userId: string;\r\n    fundId: string;\r\n    documento: string;\r\n    fundName: string;\r\n    transactionType: string;\r\n    amount: number;  \r\n}): Promise<{ message: string }> => {\r\n    try { \r\n        const response = await axios.post(`${BASE_URL}/transactions`, transactionData);\r\n       \r\n        return { message: response.data.message || 'Subscription successful!' };\r\n    } catch (error: any) { \r\n        throw new Error(error.response?.data?.message || 'Error al suscribirse al fondo.');\r\n    } \r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}