{"ast":null,"code":"import axios from 'axios';\n\n// URL base de la API desde variables de entorno\nconst BASE_URL = process.env.REACT_APP_API_URL;\n\n/**\r\n * Suscribirse a un fondo.\r\n * @param subscriptionData - Datos de la suscripción.\r\n * @returns Un objeto con el mensaje de éxito o error.\r\n */\nexport const subscribeToFund = async subscriptionData => {\n  try {\n    const response = await axios.post(`${BASE_URL}/userFunds`, subscriptionData);\n    return {\n      message: response.data.message || 'Subscription successful!'\n    };\n  } catch (error) {\n    var _error$response, _error$response$data;\n    throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Error al suscribirse al fondo.');\n  }\n};\n\n/**\r\n * Cancelar la suscripción a un fondo.\r\n * @param fundId - ID del fondo cuya suscripción se desea cancelar.\r\n * @returns Un objeto con el mensaje de éxito o error.\r\n */\nexport const cancelFundSubscription = async fundId => {\n  try {\n    const response = await axios.delete(`${BASE_URL}/funds/${fundId}`);\n    return {\n      message: response.data.message || 'Subscription cancelled successfully!'\n    };\n  } catch (error) {\n    var _error$response2, _error$response2$data;\n    throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Error al cancelar la suscripción al fondo.');\n  }\n};\n\n/**\r\n * Obtener el historial de transacciones.\r\n * @param documento - ID del usuario a consultar transacciones.\r\n * @returns Un array de objetos que representan el historial de transacciones.\r\n */\nexport const getTransactionHistory = async documento => {\n  try {\n    const response = await axios.get(`${BASE_URL}/transactions/user/${documento}`);\n    // Mapeamos la respuesta para estructurar los datos en un formato más amigable\n    return response.data.map(transaction => ({\n      type: transaction.transactionType.S,\n      // Tipo de transacción (subscribe, etc.)\n      details: `Documento: ${transaction.documento.S}, Fondo: ${transaction.fundId.S}, Monto: ${transaction.amount.N}`,\n      // Detalles personalizados\n      date: new Date(transaction.transactionDate.S).toLocaleString() // Formatear la fecha\n    }));\n  } catch (error) {\n    var _error$response3, _error$response3$data;\n    throw new Error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Error al obtener el historial de transacciones.');\n  }\n};\n\n/**\r\n * Enviar una notificación.\r\n * @param message - Mensaje de notificación a enviar.\r\n * @returns Un objeto con el mensaje de éxito o error.\r\n */\nexport const sendNotification = async (message, notifyBy) => {\n  try {\n    const response = await axios.post(`${BASE_URL}/notifications`, {\n      message,\n      notifyBy\n    });\n    return {\n      message: response.data.message || 'Notification sent successfully!'\n    };\n  } catch (error) {\n    var _error$response4, _error$response4$data;\n    throw new Error(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Error al enviar la notificación.');\n  }\n};\n\n/**\r\n * Obtener la lista de fondos disponibles.\r\n * @returns Un array de objetos que representan los fondos disponibles.\r\n */\nexport const fetchFunds = async () => {\n  try {\n    const response = await axios.get(`${BASE_URL}/funds`);\n    return response.data; // Asegúrate de que la estructura de la respuesta es [{ id: string, name: string }, ...]\n  } catch (error) {\n    var _error$response5, _error$response5$data;\n    throw new Error(((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || 'Error al obtener la lista de fondos.');\n  }\n};\n\n/**\r\n * Buscar un usuario por documento.\r\n * @param document - Documento del usuario a buscar.\r\n * @returns Un objeto con la información del usuario.\r\n */\nexport const fetchUserByDocument = async () => {\n  try {\n    const response = await axios.get(`${BASE_URL}/users`);\n    return response.data; // Asegúrate de que la respuesta tiene un campo 'id'\n  } catch (error) {\n    var _error$response6, _error$response6$data;\n    throw new Error(((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.message) || 'Error al buscar el usuario.');\n  }\n};\n\n/**\r\n * Registrar historico de la transaction de un fondo.\r\n * @param transactionData - Datos de la transaction.\r\n * @returns Un objeto con el mensaje de éxito o error.\r\n */\nexport const registrarTransactionHistory = async transactionData => {\n  try {\n    const response = await axios.post(`${BASE_URL}/transactions`, transactionData);\n    return {\n      message: response.data.message || 'Subscription successful!'\n    };\n  } catch (error) {\n    var _error$response7, _error$response7$data;\n    throw new Error(((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : (_error$response7$data = _error$response7.data) === null || _error$response7$data === void 0 ? void 0 : _error$response7$data.message) || 'Error al suscribirse al fondo.');\n  }\n};","map":{"version":3,"names":["axios","BASE_URL","process","env","REACT_APP_API_URL","subscribeToFund","subscriptionData","response","post","message","data","error","_error$response","_error$response$data","Error","cancelFundSubscription","fundId","delete","_error$response2","_error$response2$data","getTransactionHistory","documento","get","map","transaction","type","transactionType","S","details","amount","N","date","Date","transactionDate","toLocaleString","_error$response3","_error$response3$data","sendNotification","notifyBy","_error$response4","_error$response4$data","fetchFunds","_error$response5","_error$response5$data","fetchUserByDocument","_error$response6","_error$response6$data","registrarTransactionHistory","transactionData","_error$response7","_error$response7$data"],"sources":["F:/Proyectos/frontendbtg/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\n// URL base de la API desde variables de entorno\r\nconst BASE_URL = process.env.REACT_APP_API_URL; \r\n\r\n/**\r\n * Suscribirse a un fondo.\r\n * @param subscriptionData - Datos de la suscripción.\r\n * @returns Un objeto con el mensaje de éxito o error.\r\n */\r\nexport const subscribeToFund = async (subscriptionData: {\r\n    userId: string;\r\n    fundId: string;\r\n    document: string;\r\n    transactionType: string;\r\n    amount: number;\r\n    active: boolean;\r\n}): Promise<{ message: string }> => {\r\n    try { \r\n        const response = await axios.post(`${BASE_URL}/userFunds`, subscriptionData);\r\n        \r\n        return { message: response.data.message || 'Subscription successful!' };\r\n    } catch (error: any) { \r\n        throw new Error(error.response?.data?.message || 'Error al suscribirse al fondo.');\r\n    } \r\n};\r\n\r\n/**\r\n * Cancelar la suscripción a un fondo.\r\n * @param fundId - ID del fondo cuya suscripción se desea cancelar.\r\n * @returns Un objeto con el mensaje de éxito o error.\r\n */\r\nexport const cancelFundSubscription = async (fundId: string): Promise<{ message: string }> => {\r\n    try {\r\n        const response = await axios.delete(`${BASE_URL}/funds/${fundId}`);\r\n        return { message: response.data.message || 'Subscription cancelled successfully!' };\r\n    } catch (error: any) {\r\n        throw new Error(error.response?.data?.message || 'Error al cancelar la suscripción al fondo.');\r\n    }\r\n};\r\n\r\n/**\r\n * Obtener el historial de transacciones.\r\n * @param documento - ID del usuario a consultar transacciones.\r\n * @returns Un array de objetos que representan el historial de transacciones.\r\n */\r\nexport const getTransactionHistory = async (documento: string): Promise<{\r\n  transactionDate: any;\r\n  transactionType: any;\r\n  amount: any;\r\n  documento: any;  \r\n}[]> => {\r\n    try {\r\n        const response = await axios.get(`${BASE_URL}/transactions/user/${documento}`);\r\n        // Mapeamos la respuesta para estructurar los datos en un formato más amigable\r\n        return response.data.map((transaction: any) => ({\r\n            type: transaction.transactionType.S, // Tipo de transacción (subscribe, etc.)\r\n            details: `Documento: ${transaction.documento.S}, Fondo: ${transaction.fundId.S}, Monto: ${transaction.amount.N}`, // Detalles personalizados\r\n            date: new Date(transaction.transactionDate.S).toLocaleString(), // Formatear la fecha\r\n        }));\r\n    } catch (error: any) {\r\n        throw new Error(error.response?.data?.message || 'Error al obtener el historial de transacciones.');\r\n    }\r\n};\r\n\r\n\r\n/**\r\n * Enviar una notificación.\r\n * @param message - Mensaje de notificación a enviar.\r\n * @returns Un objeto con el mensaje de éxito o error.\r\n */\r\nexport const sendNotification = async (message: string, notifyBy: string): Promise<{ message: string }> => {\r\n    try {\r\n        const response = await axios.post(`${BASE_URL}/notifications`, { message, notifyBy });\r\n        return { message: response.data.message || 'Notification sent successfully!' };\r\n    } catch (error: any) {\r\n        throw new Error(error.response?.data?.message || 'Error al enviar la notificación.');\r\n    }\r\n};\r\n\r\n/**\r\n * Obtener la lista de fondos disponibles.\r\n * @returns Un array de objetos que representan los fondos disponibles.\r\n */\r\nexport const fetchFunds = async (): Promise<{ id: string; name: string }[]> => {\r\n    try {\r\n        const response = await axios.get(`${BASE_URL}/funds`);\r\n        return response.data; // Asegúrate de que la estructura de la respuesta es [{ id: string, name: string }, ...]\r\n    } catch (error: any) {\r\n        throw new Error(error.response?.data?.message || 'Error al obtener la lista de fondos.');\r\n    }\r\n};\r\n\r\n/**\r\n * Buscar un usuario por documento.\r\n * @param document - Documento del usuario a buscar.\r\n * @returns Un objeto con la información del usuario.\r\n */\r\nexport const fetchUserByDocument = async (): Promise<{id: string; name: string; documento: string }[]> => {\r\n    try {  \r\n        const response = await axios.get(`${BASE_URL}/users`);\r\n        return response.data; // Asegúrate de que la respuesta tiene un campo 'id'\r\n    } catch (error: any) {\r\n        throw new Error(error.response?.data?.message || 'Error al buscar el usuario.');\r\n    }\r\n};\r\n\r\n/**\r\n * Registrar historico de la transaction de un fondo.\r\n * @param transactionData - Datos de la transaction.\r\n * @returns Un objeto con el mensaje de éxito o error.\r\n */\r\nexport const registrarTransactionHistory = async (transactionData: {\r\n    userId: string;\r\n    fundId: string;\r\n    documento: string;\r\n    transactionType: string;\r\n    amount: number;  \r\n}): Promise<{ message: string }> => {\r\n    try { \r\n        const response = await axios.post(`${BASE_URL}/transactions`, transactionData);\r\n       \r\n        return { message: response.data.message || 'Subscription successful!' };\r\n    } catch (error: any) { \r\n        throw new Error(error.response?.data?.message || 'Error al suscribirse al fondo.');\r\n    } \r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}