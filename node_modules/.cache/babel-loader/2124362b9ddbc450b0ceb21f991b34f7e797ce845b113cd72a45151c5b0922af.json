{"ast":null,"code":"import axios from 'axios';\n\n// URL base de la API desde variables de entorno\nconst BASE_URL = process.env.REACT_APP_API_URL;\n\n/**\r\n * Suscribirse a un fondo.\r\n * @param subscriptionData - Datos de la suscripción.\r\n * @returns Un objeto con el mensaje de éxito o error.\r\n */\nexport const subscribeToFund = async subscriptionData => {\n  try {\n    console.log(subscriptionData, \"Reuqest\");\n    const response = await axios.post(`${BASE_URL}/userFunds`, subscriptionData);\n    return {\n      message: response.data.message || 'Subscription successful!'\n    };\n  } catch (error) {\n    var _error$response, _error$response$data;\n    console.log(await axios.post(`${BASE_URL}/userFunds`, subscriptionData), \"respiuestaaaaa\");\n    throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Error al suscribirse al fondo.');\n  }\n};\n\n/**\r\n * Cancelar la suscripción a un fondo.\r\n * @param fundId - ID del fondo cuya suscripción se desea cancelar.\r\n * @returns Un objeto con el mensaje de éxito o error.\r\n */\nexport const cancelFundSubscription = async fundId => {\n  try {\n    const response = await axios.delete(`${BASE_URL}/funds/${fundId}`);\n    return {\n      message: response.data.message || 'Subscription cancelled successfully!'\n    };\n  } catch (error) {\n    var _error$response2, _error$response2$data;\n    throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Error al cancelar la suscripción al fondo.');\n  }\n};\n\n/**\r\n * Obtener el historial de transacciones.\r\n * @returns Un array de objetos que representan el historial de transacciones.\r\n */\nexport const getTransactionHistory = async () => {\n  try {\n    const response = await axios.get(`${BASE_URL}/transactions`);\n    return response.data;\n  } catch (error) {\n    var _error$response3, _error$response3$data;\n    throw new Error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Error al obtener el historial de transacciones.');\n  }\n};\n\n/**\r\n * Enviar una notificación.\r\n * @param message - Mensaje de notificación a enviar.\r\n * @returns Un objeto con el mensaje de éxito o error.\r\n */\nexport const sendNotification = async (message, notifyBy) => {\n  try {\n    const response = await axios.post(`${BASE_URL}/notifications`, {\n      message,\n      notifyBy\n    });\n    return {\n      message: response.data.message || 'Notification sent successfully!'\n    };\n  } catch (error) {\n    var _error$response4, _error$response4$data;\n    throw new Error(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Error al enviar la notificación.');\n  }\n};\n\n/**\r\n * Obtener la lista de fondos disponibles.\r\n * @returns Un array de objetos que representan los fondos disponibles.\r\n */\nexport const fetchFunds = async () => {\n  try {\n    const response = await axios.get(`${BASE_URL}/funds`);\n    return response.data; // Asegúrate de que la estructura de la respuesta es [{ id: string, name: string }, ...]\n  } catch (error) {\n    var _error$response5, _error$response5$data;\n    throw new Error(((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || 'Error al obtener la lista de fondos.');\n  }\n};\n\n/**\r\n * Buscar un usuario por documento.\r\n * @param document - Documento del usuario a buscar.\r\n * @returns Un objeto con la información del usuario.\r\n */\nexport const fetchUserByDocument = async () => {\n  try {\n    const response = await axios.get(`${BASE_URL}/users`);\n    return response.data; // Asegúrate de que la respuesta tiene un campo 'id'\n  } catch (error) {\n    var _error$response6, _error$response6$data;\n    throw new Error(((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.message) || 'Error al buscar el usuario.');\n  }\n};","map":{"version":3,"names":["axios","BASE_URL","process","env","REACT_APP_API_URL","subscribeToFund","subscriptionData","console","log","response","post","message","data","error","_error$response","_error$response$data","Error","cancelFundSubscription","fundId","delete","_error$response2","_error$response2$data","getTransactionHistory","get","_error$response3","_error$response3$data","sendNotification","notifyBy","_error$response4","_error$response4$data","fetchFunds","_error$response5","_error$response5$data","fetchUserByDocument","_error$response6","_error$response6$data"],"sources":["F:/Proyectos/frontendbtg/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\n// URL base de la API desde variables de entorno\r\nconst BASE_URL = process.env.REACT_APP_API_URL; \r\n\r\n/**\r\n * Suscribirse a un fondo.\r\n * @param subscriptionData - Datos de la suscripción.\r\n * @returns Un objeto con el mensaje de éxito o error.\r\n */\r\nexport const subscribeToFund = async (subscriptionData: {\r\n    userId: string;\r\n    fundId: string;\r\n    document: string;\r\n    transactionType: string;\r\n    amount: number;\r\n    active: boolean;\r\n}): Promise<{ message: string }> => {\r\n    try { console.log(subscriptionData, \"Reuqest\");\r\n        const response = await axios.post(`${BASE_URL}/userFunds`, subscriptionData);\r\n        \r\n        return { message: response.data.message || 'Subscription successful!' };\r\n    } catch (error: any) { console.log(await axios.post(`${BASE_URL}/userFunds`, subscriptionData), \"respiuestaaaaa\")\r\n        throw new Error(error.response?.data?.message || 'Error al suscribirse al fondo.');\r\n    } \r\n};\r\n\r\n/**\r\n * Cancelar la suscripción a un fondo.\r\n * @param fundId - ID del fondo cuya suscripción se desea cancelar.\r\n * @returns Un objeto con el mensaje de éxito o error.\r\n */\r\nexport const cancelFundSubscription = async (fundId: string): Promise<{ message: string }> => {\r\n    try {\r\n        const response = await axios.delete(`${BASE_URL}/funds/${fundId}`);\r\n        return { message: response.data.message || 'Subscription cancelled successfully!' };\r\n    } catch (error: any) {\r\n        throw new Error(error.response?.data?.message || 'Error al cancelar la suscripción al fondo.');\r\n    }\r\n};\r\n\r\n/**\r\n * Obtener el historial de transacciones.\r\n * @returns Un array de objetos que representan el historial de transacciones.\r\n */\r\nexport const getTransactionHistory = async (): Promise<{ type: string; details: string; date: string }[]> => {\r\n    try {\r\n        const response = await axios.get(`${BASE_URL}/transactions`);\r\n        return response.data;\r\n    } catch (error: any) {\r\n        throw new Error(error.response?.data?.message || 'Error al obtener el historial de transacciones.');\r\n    }\r\n};\r\n\r\n/**\r\n * Enviar una notificación.\r\n * @param message - Mensaje de notificación a enviar.\r\n * @returns Un objeto con el mensaje de éxito o error.\r\n */\r\nexport const sendNotification = async (message: string, notifyBy: string): Promise<{ message: string }> => {\r\n    try {\r\n        const response = await axios.post(`${BASE_URL}/notifications`, { message, notifyBy });\r\n        return { message: response.data.message || 'Notification sent successfully!' };\r\n    } catch (error: any) {\r\n        throw new Error(error.response?.data?.message || 'Error al enviar la notificación.');\r\n    }\r\n};\r\n\r\n/**\r\n * Obtener la lista de fondos disponibles.\r\n * @returns Un array de objetos que representan los fondos disponibles.\r\n */\r\nexport const fetchFunds = async (): Promise<{ id: string; name: string }[]> => {\r\n    try {\r\n        const response = await axios.get(`${BASE_URL}/funds`);\r\n        return response.data; // Asegúrate de que la estructura de la respuesta es [{ id: string, name: string }, ...]\r\n    } catch (error: any) {\r\n        throw new Error(error.response?.data?.message || 'Error al obtener la lista de fondos.');\r\n    }\r\n};\r\n\r\n/**\r\n * Buscar un usuario por documento.\r\n * @param document - Documento del usuario a buscar.\r\n * @returns Un objeto con la información del usuario.\r\n */\r\nexport const fetchUserByDocument = async (): Promise<{id: string; name: string; documento: string }[]> => {\r\n    try {  \r\n        const response = await axios.get(`${BASE_URL}/users`);\r\n        return response.data; // Asegúrate de que la respuesta tiene un campo 'id'\r\n    } catch (error: any) {\r\n        throw new Error(error.response?.data?.message || 'Error al buscar el usuario.');\r\n    }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}