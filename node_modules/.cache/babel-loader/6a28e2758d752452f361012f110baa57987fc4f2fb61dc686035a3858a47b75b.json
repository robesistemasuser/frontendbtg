{"ast":null,"code":"// api.ts\nimport axios from 'axios';\n\n// URL base de la API desde variables de entorno\nconst BASE_URL = process.env.REACT_APP_API_URL;\n\n/**\r\n * Suscribirse a un fondo.\r\n * @param subscriptionData - Datos de la suscripción.\r\n * @returns Un mensaje de éxito o error.\r\n */\nexport const subscribeToFund = async subscriptionData => {\n  try {\n    const response = await axios.post(`${BASE_URL}/funds/subscribe`, subscriptionData);\n    return response.data;\n  } catch (error) {\n    var _error$response, _error$response$data;\n    throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Error al suscribirse al fondo.');\n  }\n};\n\n/**\r\n * Cancelar la suscripción a un fondo.\r\n * @param fundId - ID del fondo cuya suscripción se desea cancelar.\r\n * @returns Un mensaje de éxito o error.\r\n */\nexport const cancelFundSubscription = async fundId => {\n  try {\n    const response = await axios.delete(`${BASE_URL}/funds/${fundId}`);\n    return response.data;\n  } catch (error) {\n    var _error$response2, _error$response2$data;\n    throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Error al cancelar la suscripción al fondo.');\n  }\n};\n\n/**\r\n * Obtener el historial de transacciones.\r\n * @returns Un array de objetos que representan el historial de transacciones.\r\n */\nexport const getTransactionHistory = async () => {\n  try {\n    const response = await axios.get(`${BASE_URL}/transactions`);\n    return response.data;\n  } catch (error) {\n    var _error$response3, _error$response3$data;\n    throw new Error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Error al obtener el historial de transacciones.');\n  }\n};\n\n/**\r\n * Enviar una notificación.\r\n * @param message - Mensaje de notificación a enviar.\r\n * @returns Un mensaje de éxito o error.\r\n */\nexport const sendNotification = async (message, notifyBy) => {\n  try {\n    const response = await axios.post(`${BASE_URL}/notifications`, {\n      message\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response4, _error$response4$data;\n    throw new Error(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Error al enviar la notificación.');\n  }\n};\n\n/**\r\n * Obtener la lista de fondos disponibles.\r\n * @returns Un array de objetos que representan los fondos disponibles.\r\n */\nexport const fetchFunds = async () => {\n  try {\n    const response = await axios.get(`${BASE_URL}/funds`);\n    return response.data; // Asegúrate de que la estructura de la respuesta es [{ id: string, name: string }, ...]\n  } catch (error) {\n    var _error$response5, _error$response5$data;\n    throw new Error(((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || 'Error al obtener la lista de fondos.');\n  }\n};\n\n/**\r\n * Buscar un usuario por documento.\r\n * @param document - Documento del usuario a buscar.\r\n * @returns Un objeto que representa al usuario.\r\n */\nexport const fetchUserByDocument = async document => {\n  try {\n    const response = await axios.get(`${BASE_URL}/users/documento?document=${document}`);\n    return response.data; // Asegúrate de que la respuesta tiene un campo 'id'\n  } catch (error) {\n    var _error$response6, _error$response6$data;\n    throw new Error(((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.message) || 'Error al buscar el usuario.');\n  }\n};","map":{"version":3,"names":["axios","BASE_URL","process","env","REACT_APP_API_URL","subscribeToFund","subscriptionData","response","post","data","error","_error$response","_error$response$data","Error","message","cancelFundSubscription","fundId","delete","_error$response2","_error$response2$data","getTransactionHistory","get","_error$response3","_error$response3$data","sendNotification","notifyBy","_error$response4","_error$response4$data","fetchFunds","_error$response5","_error$response5$data","fetchUserByDocument","document","_error$response6","_error$response6$data"],"sources":["F:/Proyectos/frontendbtg/src/services/api.ts"],"sourcesContent":["// api.ts\r\nimport axios from 'axios';\r\n\r\n// URL base de la API desde variables de entorno\r\nconst BASE_URL = process.env.REACT_APP_API_URL;\r\n\r\n/**\r\n * Suscribirse a un fondo.\r\n * @param subscriptionData - Datos de la suscripción.\r\n * @returns Un mensaje de éxito o error.\r\n */\r\nexport const subscribeToFund = async (subscriptionData: {\r\n    userId: string;\r\n    fundId: string;\r\n    transactionType: string;\r\n    amount: number;\r\n    active: boolean;\r\n}): Promise<string> => {\r\n    try {\r\n        const response = await axios.post(`${BASE_URL}/funds/subscribe`, subscriptionData);\r\n        return response.data;\r\n    } catch (error: any) {\r\n        throw new Error(error.response?.data?.message || 'Error al suscribirse al fondo.');\r\n    }\r\n};\r\n\r\n/**\r\n * Cancelar la suscripción a un fondo.\r\n * @param fundId - ID del fondo cuya suscripción se desea cancelar.\r\n * @returns Un mensaje de éxito o error.\r\n */\r\nexport const cancelFundSubscription = async (fundId: string): Promise<string> => {\r\n    try {\r\n        const response = await axios.delete(`${BASE_URL}/funds/${fundId}`);\r\n        return response.data;\r\n    } catch (error: any) {\r\n        throw new Error(error.response?.data?.message || 'Error al cancelar la suscripción al fondo.');\r\n    }\r\n};\r\n\r\n/**\r\n * Obtener el historial de transacciones.\r\n * @returns Un array de objetos que representan el historial de transacciones.\r\n */\r\nexport const getTransactionHistory = async (): Promise<{ type: string; details: string; date: string }[]> => {\r\n    try {\r\n        const response = await axios.get(`${BASE_URL}/transactions`);\r\n        return response.data;\r\n    } catch (error: any) {\r\n        throw new Error(error.response?.data?.message || 'Error al obtener el historial de transacciones.');\r\n    }\r\n};\r\n\r\n/**\r\n * Enviar una notificación.\r\n * @param message - Mensaje de notificación a enviar.\r\n * @returns Un mensaje de éxito o error.\r\n */\r\nexport const sendNotification = async (message: string, notifyBy: string): Promise<string> => {\r\n    try {\r\n        const response = await axios.post(`${BASE_URL}/notifications`, { message });\r\n        return response.data;\r\n    } catch (error: any) {\r\n        throw new Error(error.response?.data?.message || 'Error al enviar la notificación.');\r\n    }\r\n};\r\n\r\n/**\r\n * Obtener la lista de fondos disponibles.\r\n * @returns Un array de objetos que representan los fondos disponibles.\r\n */\r\nexport const fetchFunds = async (): Promise<{ id: string; name: string }[]> => {\r\n    try {\r\n        const response = await axios.get(`${BASE_URL}/funds`);\r\n        return response.data; // Asegúrate de que la estructura de la respuesta es [{ id: string, name: string }, ...]\r\n    } catch (error: any) {\r\n        throw new Error(error.response?.data?.message || 'Error al obtener la lista de fondos.');\r\n    }\r\n};\r\n\r\n/**\r\n * Buscar un usuario por documento.\r\n * @param document - Documento del usuario a buscar.\r\n * @returns Un objeto que representa al usuario.\r\n */\r\nexport const fetchUserByDocument = async (document: string): Promise<{ id: string; document: string }> => {\r\n    try {\r\n        const response = await axios.get(`${BASE_URL}/users/documento?document=${document}`);\r\n        return response.data; // Asegúrate de que la respuesta tiene un campo 'id'\r\n    } catch (error: any) {\r\n        throw new Error(error.response?.data?.message || 'Error al buscar el usuario.');\r\n    }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}