{"ast":null,"code":"// api.ts\nimport axios from 'axios';\n\n// URL base de la API desde variables de entorno\nconst BASE_URL = process.env.REACT_APP_API_URL;\n\n/**\r\n * Suscribirse a un fondo.\r\n * @param fundId - ID del fondo al que se desea suscribirse.\r\n * @returns Un mensaje de éxito o error.\r\n */\nexport const subscribeToFund = async fundId => {\n  try {\n    const response = await axios.post(`${BASE_URL}/funds`, {\n      fundId\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response, _error$response$data;\n    throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Error al suscribirse al fondo.');\n  }\n};\n\n/**\r\n * Cancelar la suscripción a un fondo.\r\n * @param fundId - ID del fondo cuya suscripción se desea cancelar.\r\n * @returns Un mensaje de éxito o error.\r\n */\nexport const cancelFundSubscription = async fundId => {\n  try {\n    const response = await axios.delete(`${BASE_URL}/funds/${fundId}`);\n    return response.data;\n  } catch (error) {\n    var _error$response2, _error$response2$data;\n    throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Error al cancelar la suscripción al fondo.');\n  }\n};\n\n/**\r\n * Obtener el historial de transacciones.\r\n * @returns Un array de objetos que representan el historial de transacciones.\r\n */\nexport const getTransactionHistory = async () => {\n  try {\n    const response = await axios.get(`${BASE_URL}/transactions`);\n    return response.data;\n  } catch (error) {\n    var _error$response3, _error$response3$data;\n    throw new Error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Error al obtener el historial de transacciones.');\n  }\n};\n\n/**\r\n * Enviar una notificación.\r\n * @param message - Mensaje de notificación a enviar.\r\n * @returns Un mensaje de éxito o error.\r\n */\nexport const sendNotification = async message => {\n  try {\n    const response = await axios.post(`${BASE_URL}/notifications`, {\n      message\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response4, _error$response4$data;\n    throw new Error(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Error al enviar la notificación.');\n  }\n};","map":{"version":3,"names":["axios","BASE_URL","process","env","REACT_APP_API_URL","subscribeToFund","fundId","response","post","data","error","_error$response","_error$response$data","Error","message","cancelFundSubscription","delete","_error$response2","_error$response2$data","getTransactionHistory","get","_error$response3","_error$response3$data","sendNotification","_error$response4","_error$response4$data"],"sources":["F:/Proyectos/frontendbtg/src/services/api.ts"],"sourcesContent":["// api.ts\r\nimport axios from 'axios';\r\n\r\n// URL base de la API desde variables de entorno\r\nconst BASE_URL = process.env.REACT_APP_API_URL;\r\n\r\n/**\r\n * Suscribirse a un fondo.\r\n * @param fundId - ID del fondo al que se desea suscribirse.\r\n * @returns Un mensaje de éxito o error.\r\n */\r\nexport const subscribeToFund = async (fundId: string): Promise<string> => {\r\n    try {\r\n        const response = await axios.post(`${BASE_URL}/funds`, { fundId });\r\n        return response.data;\r\n    } catch (error) {\r\n        throw new Error(error.response?.data?.message || 'Error al suscribirse al fondo.');\r\n    }\r\n};\r\n\r\n/**\r\n * Cancelar la suscripción a un fondo.\r\n * @param fundId - ID del fondo cuya suscripción se desea cancelar.\r\n * @returns Un mensaje de éxito o error.\r\n */\r\nexport const cancelFundSubscription = async (fundId: string): Promise<string> => {\r\n    try {\r\n        const response = await axios.delete(`${BASE_URL}/funds/${fundId}`);\r\n        return response.data;\r\n    } catch (error) {\r\n        throw new Error(error.response?.data?.message || 'Error al cancelar la suscripción al fondo.');\r\n    }\r\n};\r\n\r\n/**\r\n * Obtener el historial de transacciones.\r\n * @returns Un array de objetos que representan el historial de transacciones.\r\n */\r\nexport const getTransactionHistory = async (): Promise<{ type: string; details: string; date: string }[]> => {\r\n    try {\r\n        const response = await axios.get(`${BASE_URL}/transactions`);\r\n        return response.data;\r\n    } catch (error) {\r\n        throw new Error(error.response?.data?.message || 'Error al obtener el historial de transacciones.');\r\n    }\r\n};\r\n\r\n/**\r\n * Enviar una notificación.\r\n * @param message - Mensaje de notificación a enviar.\r\n * @returns Un mensaje de éxito o error.\r\n */\r\nexport const sendNotification = async (message: string): Promise<string> => {\r\n    try {\r\n        const response = await axios.post(`${BASE_URL}/notifications`, { message });\r\n        return response.data;\r\n    } catch (error) {\r\n        throw new Error(error.response?.data?.message || 'Error al enviar la notificación.');\r\n    }\r\n};\r\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,QAAQ,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB;;AAE9C;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,eAAe,GAAG,MAAOC,MAAc,IAAsB;EACtE,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMP,KAAK,CAACQ,IAAI,CAAC,GAAGP,QAAQ,QAAQ,EAAE;MAAEK;IAAO,CAAC,CAAC;IAClE,OAAOC,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAC,eAAA,EAAAC,oBAAA;IACZ,MAAM,IAAIC,KAAK,CAAC,EAAAF,eAAA,GAAAD,KAAK,CAACH,QAAQ,cAAAI,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBF,IAAI,cAAAG,oBAAA,uBAApBA,oBAAA,CAAsBE,OAAO,KAAI,gCAAgC,CAAC;EACtF;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,sBAAsB,GAAG,MAAOT,MAAc,IAAsB;EAC7E,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMP,KAAK,CAACgB,MAAM,CAAC,GAAGf,QAAQ,UAAUK,MAAM,EAAE,CAAC;IAClE,OAAOC,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAO,gBAAA,EAAAC,qBAAA;IACZ,MAAM,IAAIL,KAAK,CAAC,EAAAI,gBAAA,GAAAP,KAAK,CAACH,QAAQ,cAAAU,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBR,IAAI,cAAAS,qBAAA,uBAApBA,qBAAA,CAAsBJ,OAAO,KAAI,4CAA4C,CAAC;EAClG;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMK,qBAAqB,GAAG,MAAAA,CAAA,KAAwE;EACzG,IAAI;IACA,MAAMZ,QAAQ,GAAG,MAAMP,KAAK,CAACoB,GAAG,CAAC,GAAGnB,QAAQ,eAAe,CAAC;IAC5D,OAAOM,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAW,gBAAA,EAAAC,qBAAA;IACZ,MAAM,IAAIT,KAAK,CAAC,EAAAQ,gBAAA,GAAAX,KAAK,CAACH,QAAQ,cAAAc,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBZ,IAAI,cAAAa,qBAAA,uBAApBA,qBAAA,CAAsBR,OAAO,KAAI,iDAAiD,CAAC;EACvG;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMS,gBAAgB,GAAG,MAAOT,OAAe,IAAsB;EACxE,IAAI;IACA,MAAMP,QAAQ,GAAG,MAAMP,KAAK,CAACQ,IAAI,CAAC,GAAGP,QAAQ,gBAAgB,EAAE;MAAEa;IAAQ,CAAC,CAAC;IAC3E,OAAOP,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAc,gBAAA,EAAAC,qBAAA;IACZ,MAAM,IAAIZ,KAAK,CAAC,EAAAW,gBAAA,GAAAd,KAAK,CAACH,QAAQ,cAAAiB,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBf,IAAI,cAAAgB,qBAAA,uBAApBA,qBAAA,CAAsBX,OAAO,KAAI,kCAAkC,CAAC;EACxF;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}